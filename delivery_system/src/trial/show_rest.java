/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trial;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;

public class show_rest extends javax.swing.JFrame {
    private Connection con;
    private JPanel restaurantPanel;
    public String name;
    public String username;
    
    public show_rest(String username) {
        initComponents(); // Call the generated method
        initComponentsCustom(); // Call custom initialization
        connectToDatabase();
        loadRestaurants();
        this.username = username;
    }

    private void connectToDatabase() {
        try {
            Class.forName("oracle.jdbc.OracleDriver");
            JOptionPane.showMessageDialog(this, "Driver Loaded!");
            try {
                con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "system", "kushal");
                JOptionPane.showMessageDialog(this, "Connected to Oracle database!");
            } catch (SQLException ex) {
                Logger.getLogger(show_rest.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(show_rest.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    void loadRestaurants() {
        try {
            String sql = "SELECT rest_id, rest_name, rest_type FROM restaurant";
            Statement statement = con.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);

            while (resultSet.next()) {
                String id = resultSet.getString("rest_id");
                name = resultSet.getString("rest_name");
                String type = resultSet.getString("rest_type");
                addRestaurantToPanel(id, name, type);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading restaurants.");
        }
    }

    private void addRestaurantToPanel(String id, String name, String type) {
        JPanel restaurantEntryPanel = new JPanel();
        restaurantEntryPanel.setLayout(new FlowLayout(FlowLayout.LEFT));

        JLabel nameLabel = new JLabel(name + " - " + type);
        JButton detailsButton = new JButton("Details");

        // Add action listener to the button
        detailsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Open the MenuItemsFrame
                new MenuItemsFrame(id, name, con);
            }
        });

        restaurantEntryPanel.add(nameLabel);
        restaurantEntryPanel.add(detailsButton);
        restaurantPanel.add(restaurantEntryPanel);

        // Refresh the panel to display the new entry
        restaurantPanel.revalidate();
        restaurantPanel.repaint();
    }

    @SuppressWarnings("unchecked")
    private void initComponentsCustom() {
        restaurantPanel = new JPanel();
        restaurantPanel.setLayout(new BoxLayout(restaurantPanel, BoxLayout.Y_AXIS));
        JScrollPane scrollPane = new JScrollPane(restaurantPanel);

        setTitle("Registered Restaurants");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     * 
     * 
     */
    public void main(String args[]) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new show_rest(username).setVisible(true);
            }
        });
     }
     
      class MenuItemsFrame extends JFrame {
        private JPanel menuPanel;
        private JPanel previewPanel;
        private Connection con;
        private String restaurantId;
        private ArrayList<MenuItem> selectedItems;

        public MenuItemsFrame(String restaurantId, String restaurantName, Connection connection) {
            this.restaurantId = restaurantId;
            this.con = connection;
            this.selectedItems = new ArrayList<>();

            setTitle("Menu Items for " + restaurantName);
            menuPanel = new JPanel();
            menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS));

            previewPanel = new JPanel();
            previewPanel.setLayout(new BoxLayout(previewPanel, BoxLayout.Y_AXIS));
            previewPanel.setBorder(BorderFactory.createTitledBorder("Selected Items"));

            JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, new JScrollPane(menuPanel), new JScrollPane(previewPanel));
            splitPane.setDividerLocation(300);
            splitPane.setResizeWeight(0.5);

            JButton proceedButton = new JButton("Proceed to Order");
            proceedButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    proceedWithOrder();
                }
            });

            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
            buttonPanel.add(proceedButton);

            add(splitPane, BorderLayout.CENTER);
            add(buttonPanel, BorderLayout.SOUTH);

            loadMenuItems();
            pack();
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            setVisible(true);
        }

        private void loadMenuItems() {
            try {
                String sql1 = "SELECT item_id, name, price FROM menu_items WHERE rest_id = ?";
                PreparedStatement statement = con.prepareStatement(sql1);
                statement.setString(1, restaurantId);

                ResultSet resultSet = statement.executeQuery();

                while (resultSet.next()) {
                    String itemId = resultSet.getString("item_id");
                    String itemName = resultSet.getString("name");
                    float price = resultSet.getFloat("price");

                    addItemToPanel(itemId, itemName, price);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading menu items.");
            }
        }

        private void addItemToPanel(String itemId, String itemName, float price) {
            JPanel itemEntryPanel = new JPanel();
            itemEntryPanel.setLayout(new FlowLayout(FlowLayout.LEFT));

            JLabel itemLabel = new JLabel(itemName + " - " + price);
            JTextField quantityField = new JTextField(5);
            JToggleButton selectButton = new JToggleButton("Select");

            selectButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (selectButton.isSelected()) {
                        selectButton.setText("Deselect");
                        itemSelected(itemId, itemName, price, quantityField);
                    } else {
                        selectButton.setText("Select");
                        itemDeselected(itemId, itemName, price, quantityField);
                    }
                }
            });

            itemEntryPanel.add(itemLabel);
            itemEntryPanel.add(quantityField);
            itemEntryPanel.add(selectButton);
            menuPanel.add(itemEntryPanel);

            menuPanel.revalidate();
            menuPanel.repaint();
        }

        private void itemSelected(String itemId, String itemName, float price, JTextField quantityField) {
            int quantity = Integer.parseInt(quantityField.getText());
            MenuItem selectedItem = new MenuItem(itemId, itemName, price, quantity);
            selectedItems.add(selectedItem);
            updatePreviewPanel();
        }

        private void itemDeselected(String itemId, String itemName, float price, JTextField quantityField) {
            int quantity = Integer.parseInt(quantityField.getText());
            MenuItem deselectedItem = new MenuItem(itemId, itemName, price, quantity);
            selectedItems.remove(deselectedItem);
            updatePreviewPanel();
        }

        private void updatePreviewPanel() {
            previewPanel.removeAll();
            for (MenuItem item : selectedItems) {
                previewPanel.add(new JLabel(item.getName() + " - " + item.getPrice() + " (Quantity: " + item.getQuantity() + ")"));
            }
            previewPanel.revalidate();
            previewPanel.repaint();
        }

        private void proceedWithOrder() {
            String orderId = generateOrderId();

            try {
                String sql = "INSERT INTO order_items(order_id, item_id, quantity) VALUES (?, ?, ?)";
                PreparedStatement statement = con.prepareStatement(sql);

                for (MenuItem item : selectedItems) {
                    statement.setString(1, orderId);
                    statement.setString(2, item.getItemId());
                    statement.setInt(3, item.getQuantity());
                    statement.addBatch();
                }

                int[] result = statement.executeBatch();

                if (result.length == selectedItems.size()) {
                    JOptionPane.showMessageDialog(this, "Order placed successfully. Order ID: " + orderId);

                    new payment(orderId,selectedItems,name,username).setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Error placing order.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error placing order.");
            }
        }

        private String generateOrderId() {
            String orderId = null;
            try {
                String sql = "SELECT MAX(to_number(substr(order_id, 2))) AS max_id FROM order_items";
                Statement statement = con.createStatement();
                ResultSet resultSet = statement.executeQuery(sql);

                int maxId = 0;
                if (resultSet.next()) {
                    maxId = resultSet.getInt("max_id");
                }

                maxId++;
                orderId = String.format("O%04d", maxId);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error generating order ID.");
            }
            return orderId;
        }
      }
}

        class MenuItem {
            private String itemId;
            private String name;
            private float price;
            private int quantity;

            public MenuItem(String itemId, String name, float price, int quantity) {
                this.itemId = itemId;
                this.name = name;
                this.price = price;
                this.quantity = quantity;
            }

            public String getItemId() {
                return itemId;
            }

            public String getName() {
                return name;
            }

            public float getPrice() {
                return price;
            }

            public int getQuantity() {
                return quantity;
            }

            @Override
            public boolean equals(Object obj) {
                if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        MenuItem menuItem = (MenuItem) obj;
        return itemId.equals(menuItem.itemId);
            }
            @Override
    public int hashCode() {
        return itemId.hashCode();
    }
        }

 


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

